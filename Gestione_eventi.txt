Selezionare tutti gli eventi gratis, cioè con prezzo nullo (19)

- SELECT * FROM `events` WHERE price IS NULL;


Selezionare tutte le location in ordine alfabetico (82)

- SELECT * FROM `locations` ORDER BY name;


Selezionare tutti gli eventi che costano meno di 20 euro e durano meno di 3 ore (38)

- SELECT * FROM `events` WHERE price < 20 and duration < '03:00:00';


Selezionare tutti gli eventi di dicembre 2023 (25)

- SELECT * FROM `events` WHERE start > '2023-12-01' ORDER BY start;


Selezionare tutti gli eventi con una durata maggiore alle 2 ore (823)

- SELECT * FROM `events` WHERE duration > '02:45:00';
- SELECT * FROM `events` WHERE duration > '02:00:00';


Selezionare tutti gli eventi, mostrando nome, data di inizio, ora di inizio, ora di fine e
durata totale (1040)

- SELECT events.name, events.start, events.end_of_sale, events.duration FROM `events`; ((non proprio capita - nome delle colonne))


Selezionare tutti gli eventi aggiunti da “Fabiano Lombardo” (id: 1202) (132)

- SELECT * FROM `events` WHERE events.user_id = 1202;

- SELECT *, users.id, users.first_name, users.last_name FROM `events` 
  JOIN users ON events.user_id = users.id 
  WHERE users.first_name = 'Fabiano' AND users.last_name = 'Lombardo' 
  ORDER BY events.id;


Selezionare il numero totale di eventi per ogni fascia di prezzo (81)

- SELECT events.price, COUNT(*) FROM `events` GROUP BY price;


Selezionare tutti gli utenti admin ed editor (9)

- SELECT users.first_name, users.last_name, roles.name FROM users 
  JOIN roles ON roles.id = users.role_id 
  WHERE roles.name = 'Admin' OR roles.name = 'Editor';


Selezionare tutti i concerti (eventi con il tag “concerti”) (72)

- SELECT events.name, events.id, tags.id, tags.name FROM `events` 
  JOIN event_tag ON events.id = event_tag.event_id 
  JOIN tags ON event_tag.tag_id = tags.id 
  WHERE tags.name = 'Concerti';

Selezionare tutti i tag e il prezzo medio degli eventi a loro collegati (11)

- SELECT AVG(events.price), tags.name FROM `tags`
  JOIN event_tag ON tags.id = event_tag.tag_id
  JOIN events ON event_tag.event_id = events.id
  GROUP BY tags.name;


Selezionare tutte le location e mostrare quanti eventi si sono tenute in ognuna di
esse (82)

- SELECT locations.name, COUNT('numero eventi') 
  FROM `events` 
  JOIN locations ON locations.id = events.location_id 
  GROUP BY locations.name;



Selezionare tutti i partecipanti per l’evento “Concerto Classico Serale” (slug:
concerto-classico-serale, id: 34) (30)

- SELECT events.name, users.first_name, users.last_name 
  FROM events JOIN bookings ON events.id = bookings.event_id 
  JOIN users ON bookings.user_id = users.id 
  WHERE events.id = 34;


Selezionare tutti i partecipanti all’evento “Festival Jazz Estivo” (slug:
festival-jazz-estivo, id: 2) specificando nome e cognome (13)

- SELECT events.name, users.first_name, users.last_name 
  FROM events JOIN bookings ON events.id = bookings.event_id 
  JOIN users ON bookings.user_id = users.id 
  WHERE events.id = 2;


Selezionare tutti gli eventi sold out (dove il totale delle prenotazioni è uguale ai
biglietti totali per l’evento) (18)

- SELECT events.name, bookings.id FROM events 
  JOIN bookings on events.id = bookings.event_id 
  WHERE events.total_tickets = bookings.user_id;


Selezionare tutte le location in ordine per chi ha ospitato più eventi (82)

- SELECT locations.id, COUNT('number of events') FROM `locations` 
  JOIN events ON events.location_id = locations.id 
  GROUP BY locations.id 
  ORDER BY COUNT('number of events');


Selezionare tutti gli utenti che si sono prenotati a più di 70 eventi (74)

- SELECT users.first_name, users.last_name, COUNT('numero di prenotazioni') FROM `bookings` 
  JOIN users ON user_id = users.id 
  GROUP BY bookings.user_id HAVING COUNT('numero di prenotazioni') > 70;


Selezionare tutti gli eventi, mostrando il nome dell’evento, il nome della location, il
numero di prenotazioni e il totale di biglietti ancora disponibili per l’evento (1040)



